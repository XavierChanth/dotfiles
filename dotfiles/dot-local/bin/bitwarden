#!/bin/bash

# TODOS:
# - Migrate OTPs to bitwarden
# - Select OTP code for domain

if [ $(uname) = 'Darwin' ]; then
  bw='/opt/homebrew/bin/bw'
  picker='/Applications/dmenu-mac.app/Contents/MacOS/dmenu-mac'
  get_password='macos_get_password'
  bad_password='macos_bad_password'
  clipboard='pbcopy'
  oath='/opt/homebrew/bin/oathtool'
  # keychain stuff
  create_keychain='macos_create_keychain'
  clear_session='macos_clear_session_token'
  save_session='macos_save_session_token'
  get_session='macos_get_session_token'
  lock_keychain='macos_lock_keychain'
else
  # TODO: other platforms
  echo Platform not setup / supported
  exit 1
fi

# This returns the password from this function as plaintext, use at your own risk
# I prefer this over storing my password / session in some secret which could
# potentially get leaked by another malicious program
macos_get_password() {
  local prompt="$1"
  [ -z "$prompt" ] && prompt="Password"
  echo $(osascript -e "set dialogText to text returned of (display dialog \"$prompt:\" default answer \"\" hidden answer true)
  return dialogText" 2>/dev/null)
}

macos_bad_password() {
  osascript -e "display dialog \"Password authentication failed\" with icon caution" >/dev/null 2>&1
}

macos_create_keychain() {
  local password=$(macos_get_password "Set vault pincode")
  {
    echo $password
    echo $password
  } | security create-keychain bitwarden >/dev/null 2>&1
}

macos_clear_session_token() {
  security delete-generic-password -a session -s bitwarden bitwarden >/dev/null 2>&1
}

macos_save_session_token() {
  local token=$1
  macos_clear_session_token
  security add-generic-password -a session -s bitwarden -w $token bitwarden >/dev/null 2>&1
}

macos_get_session_token() {
  echo $(security find-generic-password -a session -s bitwarden -g bitwarden 2>&1 | grep 'password:' | cut -d '"' -f2)
}

macos_lock_keychain() {
  security lock-keychain bitwarden >/dev/null 2>&1
}

# setup the keychain and login to bitwarden
# must be called from an interactive shell
setup() {
  echo Logging in to Bitwarden:
  $bw login
  echo Creating Bitwarden keychain:
  $create_keychain
}

unlock() {
  local session=$($get_session)
  if ! env BW_SESSION="$session" $bw --nointeraction unlock --check >/dev/null 2>&1; then
    local password=$($get_password "Bitwarden master password")
    if [ -z "$password" ]; then
      # user cancelled
      return 0
    fi
    local session=$($bw --nointeraction unlock --raw "$password" 2>/dev/null)
    if [ -z $session ]; then
      $bad_password
      return 1
    fi
    $save_session $session
  fi
}

lock() {
  # lock just the keychain
  # requires keychain password to unlock again
  $lock_keychain
}

lock_vault() {
  # lock the bitwarden vault
  # requires master password to unlock again
  $bw --nointeraction lock >/dev/null 2>&1
}

pick_item() {
  local display_items="$@"
  local selected=$({
    echo ".Cancel"
    printf "%s" "$display_items"
  } | $picker)
  if [ "$selected" = '.Cancel' ]; then
    printf ""
    return 0
  fi
  printf "%s" "$selected"
}

pick_password() {
  unlock
  local session=$($get_session)
  # This is slow
  local items=$($bw --nointeraction --session "$session" list items $@ 2>/dev/null |
    jq -c 'map({ id, name } + (if .login.username then {user: .login.username} else {} end) + (if .login.password then {pass: .login.password} else {} end))')
  lock
  local display_items=$(printf "%s" "$items" | jq -r '.[] | "\(.name) (\(.user)) [\(.id)]"')
  local selected=$(pick_item "$display_items")
  [ -z "$selected" ] && return 0
  local selected_id=$(printf "%s" "$selected" | grep -o ' \[.*\]$' | cut -d'[' -f2 | cut -d']' -f1)
  local item=$(printf "%s" "$items" | jq -r ".[] | select(.id==\"$selected_id\") | .pass")
  printf "%s" "$item"
}

pick_password_to_clipboard() {
  pick_password | $clipboard
}

pick_username() {
  unlock
  local session=$($get_session)
  # This is slow
  local items=$($bw --nointeraction --session "$session" list items $@ 2>/dev/null |
    jq -c 'map({ id, name } + (if .login.username then {user: .login.username} else {} end))')
  lock
  local display_items=$(printf "%s" "$items" | jq -r '.[] | "\(.name) (\(.user)) [\(.id)]"')
  local selected=$(pick_item "$display_items")
  [ -z "$selected" ] && return 0
  local selected_id=$(printf "%s" "$selected" | grep -o ' \[.*\]$' | cut -d'[' -f2 | cut -d']' -f1)
  local item=$(printf "%s" "$items" | jq -r ".[] | select(.id==\"$selected_id\") | .user")
  printf "%s" "$item"
}

pick_username_to_clipboard() {
  pick_username | $clipboard
}

# requires premium bitwarden :(
pick_totp() {
  unlock
  local session=$($get_session)
  # This is slow
  local items=$($bw --nointeraction --session "$session" list items $@ 2>/dev/null |
    jq -c 'map(select(.login.totp != null) | { id, name } + (if .login.username then {totp: .login.totp} else {} end))')
  lock
  local display_items=$(printf "%s" "$items" | jq -r '.[] | "\(.name) [\(.id)]"')
  local selected=$(pick_item "$display_items")
  [ -z "$selected" ] && return 0
  local selected_id=$(printf "%s" "$selected" | grep -o ' \[.*\]$' | cut -d'[' -f2 | cut -d']' -f1)
  local otp_uri=$(printf "%s" "$items" | jq -r ".[] | select(.id==\"$selected_id\") | .totp")
  printf "%s" "$otp_uri" | grep -q 'otpauth://' || return 1 # unrecognized format
  local items=$(printf "%s" "$otp_uri" | sed -e 's|otpauth://\([a-z]*\)/.*secret=\(.*\)\(\&.*\)$|\1 \2|')
  local otp_type=$(printf "%s" "$items" | cut -w -f1)
  local otp_secret=$(printf "%s" "$items" | cut -w -f2)
  case "$otp_type" in
    hotp | totp) local item=$($oath -b --"$otp_type" "$otp_secret") ;;
    *) return 1 ;; # unrecognized type;;
  esac
  printf "%s" "$item"
}

pick_totp_to_clipboard() {
  pick_totp | $clipboard
}

pick_username_and_password() {
  unlock
  local session=$($get_session)
  # This is slow
  local items=$($bw --nointeraction --session "$session" list items $@ 2>/dev/null |
    jq -c 'map({ id, name } + (if .login.username then {user: .login.username} else {} end) + (if .login.password then {pass: .login.password} else {} end))')
  lock
  local display_items=$(printf "%s" "$items" | jq -r '.[] | "\(.name) (\(.user)) [\(.id)]"')
  local selected=$(pick_item "$display_items")
  [ -z "$selected" ] && return 0
  local selected_id=$(printf "%s" "$selected" | grep -o ' \[.*\]$' | cut -d'[' -f2 | cut -d']' -f1)
  local item1=$(printf "%s" "$items" | jq -r ".[] | select(.id==\"$selected_id\") | .user")
  local item2=$(printf "%s" "$items" | jq -r ".[] | select(.id==\"$selected_id\") | .pass")
  printf "%s\n%s" "$item1" "$item2"
}

scripts="lock unlock pick_password_to_clipboard pick_username_to_clipboard pick_totp_to_clipboard"
main() {
  local command=$1
  shift 1

  local found=false
  for cmd in $scripts; do
    if [ "$command" = "$cmd" ]; then
      found=true
    fi
  done

  if $found; then
    $command $@
  else
    echo "Accepted commands: $scripts"
    return 1
  fi
}

# Helper function
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
is_sourced() {
  if [ -n "$ZSH_VERSION" ]; then
    case $ZSH_EVAL_CONTEXT in *:file:*) return 0 ;; esac
  else # Add additional POSIX-compatible shell names here, if needed.
    case ${0##*/} in dash | -dash | bash | -bash | ksh | -ksh | sh | -sh) return 0 ;; esac
  fi
  return 1 # NOT sourced.
}

is_sourced || main $@
